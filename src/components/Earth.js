/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useContext, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import MousePosContext from "./MousePosContext";
import { cosineInterpolate } from "../utils/InteractivityUtils";
import { MeshToonMaterial } from "three";

export default function Earth({ ...props }) {
  const cloudScale = 1;

  const all = useRef();
  const test = useRef();
  const group = useRef();
  const clouds = useRef();
  const clouds2 = useRef();
  const { globalCoords } = useContext(MousePosContext);

  useFrame(() => {
    group.current.rotation.z = cosineInterpolate(
      group.current.rotation.z,
      globalCoords.y * 5,
      0.1
    );
    group.current.rotation.y = cosineInterpolate(
      group.current.rotation.y,
      globalCoords.x * 8,
      0.1
    );
    clouds.current.rotation.x += 0.0002;
    clouds2.current.rotation.x += 0.0003;

    clouds.current.children.forEach((cloud) => {
      cloud.quaternion.slerp(all.current.quaternion, 1);
    });
    clouds2.current.children.forEach((cloud) => {
      cloud.quaternion.slerp(all.current.quaternion, 1);
    });
  });

  useFrame(() => {
    all.current.position.z = cosineInterpolate(
      all.current.position.z,
      globalCoords.x * -10,
      0.1
    );
    all.current.position.y = cosineInterpolate(
      all.current.position.y,
      globalCoords.y * -10,
      0.1
    );

    all.current.rotation.y += 0.001;
  });

  const { nodes, materials } = useGLTF("/ep-portfolio/earth.gltf");

  materials.White = new MeshToonMaterial({ color: materials.White.color });
  materials.Snow = new MeshToonMaterial({ color: materials.Snow.color });
  materials.Red = new MeshToonMaterial({ color: materials.Red.color });
  materials.DarkGreen = new MeshToonMaterial({
    color: materials.DarkGreen.color,
  });
  materials.LightBrown = new MeshToonMaterial({
    color: materials.LightBrown.color,
  });
  materials.Brown = new MeshToonMaterial({
    color: materials.LightBrown.color,
  });

  return (
    <group ref={all} {...props} scale={1} dispose={null}>
      <group ref={group} {...props} scale={4} dispose={null}>
        <mesh
          geometry={nodes["Icosphere-Mesh"].geometry}
          material={new MeshToonMaterial({ color: 0x0022ff })}
          scale={1}
        />
        <mesh
          geometry={nodes["Icosphere-Mesh_1"].geometry}
          material={new MeshToonMaterial({ color: 0x004307 })}
        />
        <mesh
          geometry={nodes["Icosphere-Mesh_1"].geometry}
          material={new MeshToonMaterial({ color: 0x007307 })}
          scale={1.03}
        />
        <mesh
          geometry={nodes["Icosphere-Mesh_2"].geometry}
          material={materials.Snow}
        />
        <mesh
          geometry={nodes["Icosphere-Mesh_3"].geometry}
          material={materials.Brown}
        />
        <mesh
          geometry={nodes["Icosphere-Mesh_4"].geometry}
          material={materials.DarkGreen}
        />
        <mesh
          geometry={nodes["Cube001_Cube004-Mesh"].geometry}
          material={materials.Red}
        />
        <mesh
          geometry={nodes["Cube001_Cube004-Mesh_1"].geometry}
          material={materials.White}
        />
        <mesh
          geometry={nodes.Cube_Cube003.geometry}
          material={materials.LightBrown}
        />
      </group>
      <group
        ref={clouds}
        {...props}
        scale={4}
        dispose={null}
        args={[100, 100, 100, 100]}
      >
        <mesh
          geometry={nodes.Icosphere004_Icosphere005.geometry}
          material={materials.White}
          scale={cloudScale}
          ref={test}
        />
        <mesh
          geometry={nodes.Icosphere002_Icosphere003.geometry}
          material={materials.White}
          scale={cloudScale}
        />
        <mesh
          geometry={nodes.Icosphere001_Icosphere002.geometry}
          material={materials.White}
          scale={cloudScale}
        />
      </group>
      <group ref={clouds2} {...props} scale={4} dispose={null}>
        <mesh
          geometry={nodes.Icosphere003_Icosphere004.geometry}
          material={materials.White}
          scale={cloudScale}
        />
        <mesh
          geometry={nodes.Icosphere002_Icosphere003.geometry}
          material={materials.White}
          scale={cloudScale}
        />
        <mesh
          geometry={nodes.Icosphere001_Icosphere002.geometry}
          material={materials.White}
          scale={cloudScale}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/ep-portfolio/earth.gltf");
